
temperature meter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b6a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00000b6a  00000bfe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  0080006e  0080006e  00000c0c  2**0
                  ALLOC
  3 .stab         00001674  00000000  00000000  00000c0c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000004c0  00000000  00000000  00002280  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000100  00000000  00000000  00002740  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c6c  00000000  00000000  00002840  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000367  00000000  00000000  000034ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000706  00000000  00000000  00003813  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001ac  00000000  00000000  00003f1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002d0  00000000  00000000  000040c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006f4  00000000  00000000  00004398  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e6       	ldi	r30, 0x6A	; 106
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ae e6       	ldi	r26, 0x6E	; 110
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 37       	cpi	r26, 0x71	; 113
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <main>
  8a:	0c 94 b3 05 	jmp	0xb66	; 0xb66 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_vinit>:
 */ 
#include <avr/io.h>
#include "std_macros.h"
void ADC_vinit(void)
{
	SET_BIT(ADMUX,REFS0); //configure VREF
  92:	3e 9a       	sbi	0x07, 6	; 7
	SET_BIT(ADMUX,REFS1);
  94:	3f 9a       	sbi	0x07, 7	; 7
	SET_BIT(ADCSRA,ADEN); // enable ADC
  96:	37 9a       	sbi	0x06, 7	; 6
	/* adjust ADC clock*/
	SET_BIT(ADCSRA,ADPS2);
  98:	32 9a       	sbi	0x06, 2	; 6
	SET_BIT(ADCSRA,ADPS1);
  9a:	31 9a       	sbi	0x06, 1	; 6
}
  9c:	08 95       	ret

0000009e <ADC_u16Read>:
 unsigned short ADC_u16Read(void)
{
	 unsigned short read_val;
	
	SET_BIT(ADCSRA,ADSC);
  9e:	36 9a       	sbi	0x06, 6	; 6
	while(IS_BIT_CLR(ADCSRA,ADIF));//stay in your position till ADIF become 1
  a0:	34 9b       	sbis	0x06, 4	; 6
  a2:	fe cf       	rjmp	.-4      	; 0xa0 <ADC_u16Read+0x2>
	SET_BIT(ADCSRA,ADIF); // clear ADIF
  a4:	34 9a       	sbi	0x06, 4	; 6
	read_val=(ADCL);
  a6:	84 b1       	in	r24, 0x04	; 4
  a8:	90 e0       	ldi	r25, 0x00	; 0
	read_val|=(ADCH<<8);
  aa:	45 b1       	in	r20, 0x05	; 5
  ac:	34 2f       	mov	r19, r20
  ae:	20 e0       	ldi	r18, 0x00	; 0
  b0:	82 2b       	or	r24, r18
  b2:	93 2b       	or	r25, r19
	return read_val ;
  b4:	08 95       	ret

000000b6 <DIO_vsetPINDir>:

#include <avr/io.h>
#include "std_macros.h"
void DIO_vsetPINDir(unsigned char portname,unsigned char pinnumber,unsigned char direction)
{
	switch(portname)
  b6:	82 34       	cpi	r24, 0x42	; 66
  b8:	51 f1       	breq	.+84     	; 0x10e <DIO_vsetPINDir+0x58>
  ba:	83 34       	cpi	r24, 0x43	; 67
  bc:	20 f4       	brcc	.+8      	; 0xc6 <DIO_vsetPINDir+0x10>
  be:	81 34       	cpi	r24, 0x41	; 65
  c0:	09 f0       	breq	.+2      	; 0xc4 <DIO_vsetPINDir+0xe>
  c2:	7b c0       	rjmp	.+246    	; 0x1ba <DIO_vsetPINDir+0x104>
  c4:	07 c0       	rjmp	.+14     	; 0xd4 <DIO_vsetPINDir+0x1e>
  c6:	83 34       	cpi	r24, 0x43	; 67
  c8:	09 f4       	brne	.+2      	; 0xcc <DIO_vsetPINDir+0x16>
  ca:	3e c0       	rjmp	.+124    	; 0x148 <DIO_vsetPINDir+0x92>
  cc:	84 34       	cpi	r24, 0x44	; 68
  ce:	09 f0       	breq	.+2      	; 0xd2 <DIO_vsetPINDir+0x1c>
  d0:	74 c0       	rjmp	.+232    	; 0x1ba <DIO_vsetPINDir+0x104>
  d2:	57 c0       	rjmp	.+174    	; 0x182 <DIO_vsetPINDir+0xcc>
	{
		
		
		case 'A':
		if(direction==1)
  d4:	41 30       	cpi	r20, 0x01	; 1
  d6:	69 f4       	brne	.+26     	; 0xf2 <DIO_vsetPINDir+0x3c>
		{
			SET_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as output
  d8:	2a b3       	in	r18, 0x1a	; 26
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	ac 01       	movw	r20, r24
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <DIO_vsetPINDir+0x30>
  e2:	44 0f       	add	r20, r20
  e4:	55 1f       	adc	r21, r21
  e6:	6a 95       	dec	r22
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <DIO_vsetPINDir+0x2c>
  ea:	ba 01       	movw	r22, r20
  ec:	62 2b       	or	r22, r18
  ee:	6a bb       	out	0x1a, r22	; 26
  f0:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as input
  f2:	2a b3       	in	r18, 0x1a	; 26
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	ac 01       	movw	r20, r24
  fa:	02 c0       	rjmp	.+4      	; 0x100 <DIO_vsetPINDir+0x4a>
  fc:	44 0f       	add	r20, r20
  fe:	55 1f       	adc	r21, r21
 100:	6a 95       	dec	r22
 102:	e2 f7       	brpl	.-8      	; 0xfc <DIO_vsetPINDir+0x46>
 104:	ba 01       	movw	r22, r20
 106:	60 95       	com	r22
 108:	62 23       	and	r22, r18
 10a:	6a bb       	out	0x1a, r22	; 26
 10c:	08 95       	ret
		}
		break;
		case 'B':
		if(direction==1)
 10e:	41 30       	cpi	r20, 0x01	; 1
 110:	69 f4       	brne	.+26     	; 0x12c <DIO_vsetPINDir+0x76>
		{
			SET_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as output
 112:	27 b3       	in	r18, 0x17	; 23
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	ac 01       	movw	r20, r24
 11a:	02 c0       	rjmp	.+4      	; 0x120 <DIO_vsetPINDir+0x6a>
 11c:	44 0f       	add	r20, r20
 11e:	55 1f       	adc	r21, r21
 120:	6a 95       	dec	r22
 122:	e2 f7       	brpl	.-8      	; 0x11c <DIO_vsetPINDir+0x66>
 124:	ba 01       	movw	r22, r20
 126:	62 2b       	or	r22, r18
 128:	67 bb       	out	0x17, r22	; 23
 12a:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as input
 12c:	27 b3       	in	r18, 0x17	; 23
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	ac 01       	movw	r20, r24
 134:	02 c0       	rjmp	.+4      	; 0x13a <DIO_vsetPINDir+0x84>
 136:	44 0f       	add	r20, r20
 138:	55 1f       	adc	r21, r21
 13a:	6a 95       	dec	r22
 13c:	e2 f7       	brpl	.-8      	; 0x136 <DIO_vsetPINDir+0x80>
 13e:	ba 01       	movw	r22, r20
 140:	60 95       	com	r22
 142:	62 23       	and	r22, r18
 144:	67 bb       	out	0x17, r22	; 23
 146:	08 95       	ret
		}
		break;
		case 'C':
		if(direction==1)
 148:	41 30       	cpi	r20, 0x01	; 1
 14a:	69 f4       	brne	.+26     	; 0x166 <DIO_vsetPINDir+0xb0>
		{
			SET_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as output
 14c:	24 b3       	in	r18, 0x14	; 20
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	ac 01       	movw	r20, r24
 154:	02 c0       	rjmp	.+4      	; 0x15a <DIO_vsetPINDir+0xa4>
 156:	44 0f       	add	r20, r20
 158:	55 1f       	adc	r21, r21
 15a:	6a 95       	dec	r22
 15c:	e2 f7       	brpl	.-8      	; 0x156 <DIO_vsetPINDir+0xa0>
 15e:	ba 01       	movw	r22, r20
 160:	62 2b       	or	r22, r18
 162:	64 bb       	out	0x14, r22	; 20
 164:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as input
 166:	24 b3       	in	r18, 0x14	; 20
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	ac 01       	movw	r20, r24
 16e:	02 c0       	rjmp	.+4      	; 0x174 <DIO_vsetPINDir+0xbe>
 170:	44 0f       	add	r20, r20
 172:	55 1f       	adc	r21, r21
 174:	6a 95       	dec	r22
 176:	e2 f7       	brpl	.-8      	; 0x170 <DIO_vsetPINDir+0xba>
 178:	ba 01       	movw	r22, r20
 17a:	60 95       	com	r22
 17c:	62 23       	and	r22, r18
 17e:	64 bb       	out	0x14, r22	; 20
 180:	08 95       	ret
		}
		break;
		case 'D':
		if(direction==1)
 182:	41 30       	cpi	r20, 0x01	; 1
 184:	69 f4       	brne	.+26     	; 0x1a0 <DIO_vsetPINDir+0xea>
		{
			SET_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as output
 186:	21 b3       	in	r18, 0x11	; 17
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	ac 01       	movw	r20, r24
 18e:	02 c0       	rjmp	.+4      	; 0x194 <DIO_vsetPINDir+0xde>
 190:	44 0f       	add	r20, r20
 192:	55 1f       	adc	r21, r21
 194:	6a 95       	dec	r22
 196:	e2 f7       	brpl	.-8      	; 0x190 <DIO_vsetPINDir+0xda>
 198:	ba 01       	movw	r22, r20
 19a:	62 2b       	or	r22, r18
 19c:	61 bb       	out	0x11, r22	; 17
 19e:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as input
 1a0:	21 b3       	in	r18, 0x11	; 17
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	ac 01       	movw	r20, r24
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <DIO_vsetPINDir+0xf8>
 1aa:	44 0f       	add	r20, r20
 1ac:	55 1f       	adc	r21, r21
 1ae:	6a 95       	dec	r22
 1b0:	e2 f7       	brpl	.-8      	; 0x1aa <DIO_vsetPINDir+0xf4>
 1b2:	ba 01       	movw	r22, r20
 1b4:	60 95       	com	r22
 1b6:	62 23       	and	r22, r18
 1b8:	61 bb       	out	0x11, r22	; 17
 1ba:	08 95       	ret

000001bc <DIO_write>:
}


void DIO_write(unsigned char portname,unsigned char pinnumber,unsigned char outputvalue)
{
	switch(portname)
 1bc:	82 34       	cpi	r24, 0x42	; 66
 1be:	51 f1       	breq	.+84     	; 0x214 <DIO_write+0x58>
 1c0:	83 34       	cpi	r24, 0x43	; 67
 1c2:	20 f4       	brcc	.+8      	; 0x1cc <DIO_write+0x10>
 1c4:	81 34       	cpi	r24, 0x41	; 65
 1c6:	09 f0       	breq	.+2      	; 0x1ca <DIO_write+0xe>
 1c8:	7b c0       	rjmp	.+246    	; 0x2c0 <DIO_write+0x104>
 1ca:	07 c0       	rjmp	.+14     	; 0x1da <DIO_write+0x1e>
 1cc:	83 34       	cpi	r24, 0x43	; 67
 1ce:	09 f4       	brne	.+2      	; 0x1d2 <DIO_write+0x16>
 1d0:	3e c0       	rjmp	.+124    	; 0x24e <DIO_write+0x92>
 1d2:	84 34       	cpi	r24, 0x44	; 68
 1d4:	09 f0       	breq	.+2      	; 0x1d8 <DIO_write+0x1c>
 1d6:	74 c0       	rjmp	.+232    	; 0x2c0 <DIO_write+0x104>
 1d8:	57 c0       	rjmp	.+174    	; 0x288 <DIO_write+0xcc>
	{
		case 'A' :
		
		if(outputvalue==1)
 1da:	41 30       	cpi	r20, 0x01	; 1
 1dc:	69 f4       	brne	.+26     	; 0x1f8 <DIO_write+0x3c>
		{
			SET_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as High
 1de:	2b b3       	in	r18, 0x1b	; 27
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	ac 01       	movw	r20, r24
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <DIO_write+0x30>
 1e8:	44 0f       	add	r20, r20
 1ea:	55 1f       	adc	r21, r21
 1ec:	6a 95       	dec	r22
 1ee:	e2 f7       	brpl	.-8      	; 0x1e8 <DIO_write+0x2c>
 1f0:	ba 01       	movw	r22, r20
 1f2:	62 2b       	or	r22, r18
 1f4:	6b bb       	out	0x1b, r22	; 27
 1f6:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as Low
 1f8:	2b b3       	in	r18, 0x1b	; 27
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	ac 01       	movw	r20, r24
 200:	02 c0       	rjmp	.+4      	; 0x206 <DIO_write+0x4a>
 202:	44 0f       	add	r20, r20
 204:	55 1f       	adc	r21, r21
 206:	6a 95       	dec	r22
 208:	e2 f7       	brpl	.-8      	; 0x202 <DIO_write+0x46>
 20a:	ba 01       	movw	r22, r20
 20c:	60 95       	com	r22
 20e:	62 23       	and	r22, r18
 210:	6b bb       	out	0x1b, r22	; 27
 212:	08 95       	ret
		}
		break ;
		case 'B':
		
		if(outputvalue==1)
 214:	41 30       	cpi	r20, 0x01	; 1
 216:	69 f4       	brne	.+26     	; 0x232 <DIO_write+0x76>
		{
			SET_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as High
 218:	28 b3       	in	r18, 0x18	; 24
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	ac 01       	movw	r20, r24
 220:	02 c0       	rjmp	.+4      	; 0x226 <DIO_write+0x6a>
 222:	44 0f       	add	r20, r20
 224:	55 1f       	adc	r21, r21
 226:	6a 95       	dec	r22
 228:	e2 f7       	brpl	.-8      	; 0x222 <DIO_write+0x66>
 22a:	ba 01       	movw	r22, r20
 22c:	62 2b       	or	r22, r18
 22e:	68 bb       	out	0x18, r22	; 24
 230:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as Low
 232:	28 b3       	in	r18, 0x18	; 24
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	ac 01       	movw	r20, r24
 23a:	02 c0       	rjmp	.+4      	; 0x240 <DIO_write+0x84>
 23c:	44 0f       	add	r20, r20
 23e:	55 1f       	adc	r21, r21
 240:	6a 95       	dec	r22
 242:	e2 f7       	brpl	.-8      	; 0x23c <DIO_write+0x80>
 244:	ba 01       	movw	r22, r20
 246:	60 95       	com	r22
 248:	62 23       	and	r22, r18
 24a:	68 bb       	out	0x18, r22	; 24
 24c:	08 95       	ret
		}
		break ;
		case 'C' :
		
		if(outputvalue==1)
 24e:	41 30       	cpi	r20, 0x01	; 1
 250:	69 f4       	brne	.+26     	; 0x26c <DIO_write+0xb0>
		{
			SET_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as High
 252:	25 b3       	in	r18, 0x15	; 21
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	ac 01       	movw	r20, r24
 25a:	02 c0       	rjmp	.+4      	; 0x260 <DIO_write+0xa4>
 25c:	44 0f       	add	r20, r20
 25e:	55 1f       	adc	r21, r21
 260:	6a 95       	dec	r22
 262:	e2 f7       	brpl	.-8      	; 0x25c <DIO_write+0xa0>
 264:	ba 01       	movw	r22, r20
 266:	62 2b       	or	r22, r18
 268:	65 bb       	out	0x15, r22	; 21
 26a:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as Low
 26c:	25 b3       	in	r18, 0x15	; 21
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	ac 01       	movw	r20, r24
 274:	02 c0       	rjmp	.+4      	; 0x27a <DIO_write+0xbe>
 276:	44 0f       	add	r20, r20
 278:	55 1f       	adc	r21, r21
 27a:	6a 95       	dec	r22
 27c:	e2 f7       	brpl	.-8      	; 0x276 <DIO_write+0xba>
 27e:	ba 01       	movw	r22, r20
 280:	60 95       	com	r22
 282:	62 23       	and	r22, r18
 284:	65 bb       	out	0x15, r22	; 21
 286:	08 95       	ret
		}
		break ;
		case 'D':
		
		if(outputvalue==1)
 288:	41 30       	cpi	r20, 0x01	; 1
 28a:	69 f4       	brne	.+26     	; 0x2a6 <DIO_write+0xea>
		{
			SET_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as High
 28c:	22 b3       	in	r18, 0x12	; 18
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	ac 01       	movw	r20, r24
 294:	02 c0       	rjmp	.+4      	; 0x29a <DIO_write+0xde>
 296:	44 0f       	add	r20, r20
 298:	55 1f       	adc	r21, r21
 29a:	6a 95       	dec	r22
 29c:	e2 f7       	brpl	.-8      	; 0x296 <DIO_write+0xda>
 29e:	ba 01       	movw	r22, r20
 2a0:	62 2b       	or	r22, r18
 2a2:	62 bb       	out	0x12, r22	; 18
 2a4:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as Low
 2a6:	22 b3       	in	r18, 0x12	; 18
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	ac 01       	movw	r20, r24
 2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <DIO_write+0xf8>
 2b0:	44 0f       	add	r20, r20
 2b2:	55 1f       	adc	r21, r21
 2b4:	6a 95       	dec	r22
 2b6:	e2 f7       	brpl	.-8      	; 0x2b0 <DIO_write+0xf4>
 2b8:	ba 01       	movw	r22, r20
 2ba:	60 95       	com	r22
 2bc:	62 23       	and	r22, r18
 2be:	62 bb       	out	0x12, r22	; 18
 2c0:	08 95       	ret

000002c2 <DIO_u8read>:


unsigned char DIO_u8read(unsigned char portname,unsigned char pinnumber)
{
	unsigned char return_value=0;
	switch(portname)
 2c2:	82 34       	cpi	r24, 0x42	; 66
 2c4:	f1 f0       	breq	.+60     	; 0x302 <DIO_u8read+0x40>
 2c6:	83 34       	cpi	r24, 0x43	; 67
 2c8:	20 f4       	brcc	.+8      	; 0x2d2 <DIO_u8read+0x10>
 2ca:	81 34       	cpi	r24, 0x41	; 65
 2cc:	09 f0       	breq	.+2      	; 0x2d0 <DIO_u8read+0xe>
 2ce:	4f c0       	rjmp	.+158    	; 0x36e <DIO_u8read+0xac>
 2d0:	06 c0       	rjmp	.+12     	; 0x2de <DIO_u8read+0x1c>
 2d2:	83 34       	cpi	r24, 0x43	; 67
 2d4:	41 f1       	breq	.+80     	; 0x326 <DIO_u8read+0x64>
 2d6:	84 34       	cpi	r24, 0x44	; 68
 2d8:	09 f0       	breq	.+2      	; 0x2dc <DIO_u8read+0x1a>
 2da:	49 c0       	rjmp	.+146    	; 0x36e <DIO_u8read+0xac>
 2dc:	36 c0       	rjmp	.+108    	; 0x34a <DIO_u8read+0x88>
	{
		case 'A' :
		return_value=READ_BIT(PINA,pinnumber);//Read the value from the given pin in port A
 2de:	29 b3       	in	r18, 0x19	; 25
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	06 2e       	mov	r0, r22
 2e6:	02 c0       	rjmp	.+4      	; 0x2ec <DIO_u8read+0x2a>
 2e8:	88 0f       	add	r24, r24
 2ea:	99 1f       	adc	r25, r25
 2ec:	0a 94       	dec	r0
 2ee:	e2 f7       	brpl	.-8      	; 0x2e8 <DIO_u8read+0x26>
 2f0:	30 e0       	ldi	r19, 0x00	; 0
 2f2:	82 23       	and	r24, r18
 2f4:	93 23       	and	r25, r19
 2f6:	02 c0       	rjmp	.+4      	; 0x2fc <DIO_u8read+0x3a>
 2f8:	95 95       	asr	r25
 2fa:	87 95       	ror	r24
 2fc:	6a 95       	dec	r22
 2fe:	e2 f7       	brpl	.-8      	; 0x2f8 <DIO_u8read+0x36>
		break;
 300:	08 95       	ret
		
		case 'B' :
		return_value=READ_BIT(PINB,pinnumber);//Read the value from the given pin in port B
 302:	26 b3       	in	r18, 0x16	; 22
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	06 2e       	mov	r0, r22
 30a:	02 c0       	rjmp	.+4      	; 0x310 <DIO_u8read+0x4e>
 30c:	88 0f       	add	r24, r24
 30e:	99 1f       	adc	r25, r25
 310:	0a 94       	dec	r0
 312:	e2 f7       	brpl	.-8      	; 0x30c <DIO_u8read+0x4a>
 314:	30 e0       	ldi	r19, 0x00	; 0
 316:	82 23       	and	r24, r18
 318:	93 23       	and	r25, r19
 31a:	02 c0       	rjmp	.+4      	; 0x320 <DIO_u8read+0x5e>
 31c:	95 95       	asr	r25
 31e:	87 95       	ror	r24
 320:	6a 95       	dec	r22
 322:	e2 f7       	brpl	.-8      	; 0x31c <DIO_u8read+0x5a>
		break;
 324:	08 95       	ret
		
		case 'C' :
		return_value=READ_BIT(PINC,pinnumber);//Read the value from the given pin in port C
 326:	23 b3       	in	r18, 0x13	; 19
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	06 2e       	mov	r0, r22
 32e:	02 c0       	rjmp	.+4      	; 0x334 <DIO_u8read+0x72>
 330:	88 0f       	add	r24, r24
 332:	99 1f       	adc	r25, r25
 334:	0a 94       	dec	r0
 336:	e2 f7       	brpl	.-8      	; 0x330 <DIO_u8read+0x6e>
 338:	30 e0       	ldi	r19, 0x00	; 0
 33a:	82 23       	and	r24, r18
 33c:	93 23       	and	r25, r19
 33e:	02 c0       	rjmp	.+4      	; 0x344 <DIO_u8read+0x82>
 340:	95 95       	asr	r25
 342:	87 95       	ror	r24
 344:	6a 95       	dec	r22
 346:	e2 f7       	brpl	.-8      	; 0x340 <DIO_u8read+0x7e>
		break;
 348:	08 95       	ret
		
		case 'D' :
		return_value=READ_BIT(PIND,pinnumber);//Read the value from the given pin in port D
 34a:	20 b3       	in	r18, 0x10	; 16
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	06 2e       	mov	r0, r22
 352:	02 c0       	rjmp	.+4      	; 0x358 <DIO_u8read+0x96>
 354:	88 0f       	add	r24, r24
 356:	99 1f       	adc	r25, r25
 358:	0a 94       	dec	r0
 35a:	e2 f7       	brpl	.-8      	; 0x354 <DIO_u8read+0x92>
 35c:	30 e0       	ldi	r19, 0x00	; 0
 35e:	82 23       	and	r24, r18
 360:	93 23       	and	r25, r19
 362:	02 c0       	rjmp	.+4      	; 0x368 <DIO_u8read+0xa6>
 364:	95 95       	asr	r25
 366:	87 95       	ror	r24
 368:	6a 95       	dec	r22
 36a:	e2 f7       	brpl	.-8      	; 0x364 <DIO_u8read+0xa2>
		break;
 36c:	08 95       	ret
}


unsigned char DIO_u8read(unsigned char portname,unsigned char pinnumber)
{
	unsigned char return_value=0;
 36e:	80 e0       	ldi	r24, 0x00	; 0
		break;
		default: 
		break;
	}
	return return_value ;
}
 370:	08 95       	ret

00000372 <DIO_toggle>:
void DIO_toggle(unsigned char portname,unsigned char pinnumber)
{
	switch(portname)
 372:	82 34       	cpi	r24, 0x42	; 66
 374:	b9 f0       	breq	.+46     	; 0x3a4 <DIO_toggle+0x32>
 376:	83 34       	cpi	r24, 0x43	; 67
 378:	18 f4       	brcc	.+6      	; 0x380 <DIO_toggle+0xe>
 37a:	81 34       	cpi	r24, 0x41	; 65
 37c:	c9 f5       	brne	.+114    	; 0x3f0 <DIO_toggle+0x7e>
 37e:	05 c0       	rjmp	.+10     	; 0x38a <DIO_toggle+0x18>
 380:	83 34       	cpi	r24, 0x43	; 67
 382:	e9 f0       	breq	.+58     	; 0x3be <DIO_toggle+0x4c>
 384:	84 34       	cpi	r24, 0x44	; 68
 386:	a1 f5       	brne	.+104    	; 0x3f0 <DIO_toggle+0x7e>
 388:	27 c0       	rjmp	.+78     	; 0x3d8 <DIO_toggle+0x66>
	{
		case 'A':
		TOG_BIT(PORTA,pinnumber);//Toggle the value of the given pin in port A
 38a:	2b b3       	in	r18, 0x1b	; 27
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	ac 01       	movw	r20, r24
 392:	02 c0       	rjmp	.+4      	; 0x398 <DIO_toggle+0x26>
 394:	44 0f       	add	r20, r20
 396:	55 1f       	adc	r21, r21
 398:	6a 95       	dec	r22
 39a:	e2 f7       	brpl	.-8      	; 0x394 <DIO_toggle+0x22>
 39c:	ba 01       	movw	r22, r20
 39e:	62 27       	eor	r22, r18
 3a0:	6b bb       	out	0x1b, r22	; 27
		break;
 3a2:	08 95       	ret
		case 'B':
		TOG_BIT(PORTB,pinnumber);//Toggle the value of the given pin in port B
 3a4:	28 b3       	in	r18, 0x18	; 24
 3a6:	81 e0       	ldi	r24, 0x01	; 1
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	ac 01       	movw	r20, r24
 3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <DIO_toggle+0x40>
 3ae:	44 0f       	add	r20, r20
 3b0:	55 1f       	adc	r21, r21
 3b2:	6a 95       	dec	r22
 3b4:	e2 f7       	brpl	.-8      	; 0x3ae <DIO_toggle+0x3c>
 3b6:	ba 01       	movw	r22, r20
 3b8:	62 27       	eor	r22, r18
 3ba:	68 bb       	out	0x18, r22	; 24
		break;
 3bc:	08 95       	ret
		case 'C':
		TOG_BIT(PORTC,pinnumber);//Toggle the value of the given pin in port C
 3be:	25 b3       	in	r18, 0x15	; 21
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	ac 01       	movw	r20, r24
 3c6:	02 c0       	rjmp	.+4      	; 0x3cc <DIO_toggle+0x5a>
 3c8:	44 0f       	add	r20, r20
 3ca:	55 1f       	adc	r21, r21
 3cc:	6a 95       	dec	r22
 3ce:	e2 f7       	brpl	.-8      	; 0x3c8 <DIO_toggle+0x56>
 3d0:	ba 01       	movw	r22, r20
 3d2:	62 27       	eor	r22, r18
 3d4:	65 bb       	out	0x15, r22	; 21
		break;
 3d6:	08 95       	ret
		case 'D':
		TOG_BIT(PORTD,pinnumber);//Toggle the value of the given pin in port D
 3d8:	22 b3       	in	r18, 0x12	; 18
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	ac 01       	movw	r20, r24
 3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <DIO_toggle+0x74>
 3e2:	44 0f       	add	r20, r20
 3e4:	55 1f       	adc	r21, r21
 3e6:	6a 95       	dec	r22
 3e8:	e2 f7       	brpl	.-8      	; 0x3e2 <DIO_toggle+0x70>
 3ea:	ba 01       	movw	r22, r20
 3ec:	62 27       	eor	r22, r18
 3ee:	62 bb       	out	0x12, r22	; 18
 3f0:	08 95       	ret

000003f2 <DIO_set_port_direction>:
		default: break;
	}
}
void DIO_set_port_direction(unsigned char portname,unsigned char direction)
{
	switch(portname)
 3f2:	82 34       	cpi	r24, 0x42	; 66
 3f4:	61 f0       	breq	.+24     	; 0x40e <DIO_set_port_direction+0x1c>
 3f6:	83 34       	cpi	r24, 0x43	; 67
 3f8:	18 f4       	brcc	.+6      	; 0x400 <DIO_set_port_direction+0xe>
 3fa:	81 34       	cpi	r24, 0x41	; 65
 3fc:	69 f4       	brne	.+26     	; 0x418 <DIO_set_port_direction+0x26>
 3fe:	05 c0       	rjmp	.+10     	; 0x40a <DIO_set_port_direction+0x18>
 400:	83 34       	cpi	r24, 0x43	; 67
 402:	39 f0       	breq	.+14     	; 0x412 <DIO_set_port_direction+0x20>
 404:	84 34       	cpi	r24, 0x44	; 68
 406:	41 f4       	brne	.+16     	; 0x418 <DIO_set_port_direction+0x26>
 408:	06 c0       	rjmp	.+12     	; 0x416 <DIO_set_port_direction+0x24>
	{
		case 'A' :
		DDRA=direction; //set the direction of port A
 40a:	6a bb       	out	0x1a, r22	; 26
		break ;
 40c:	08 95       	ret
		case 'B':
		DDRB=direction; //set the direction of port B
 40e:	67 bb       	out	0x17, r22	; 23
		break ;
 410:	08 95       	ret
		case 'C' :
		DDRC=direction; //set the direction of port C
 412:	64 bb       	out	0x14, r22	; 20
		break ;
 414:	08 95       	ret
		case 'D':
		DDRD=direction; //set the direction of port D
 416:	61 bb       	out	0x11, r22	; 17
 418:	08 95       	ret

0000041a <DIO_write_port>:
	}
	
}
void DIO_write_port(unsigned char portname,unsigned char portvalue)
{
	switch(portname)
 41a:	82 34       	cpi	r24, 0x42	; 66
 41c:	61 f0       	breq	.+24     	; 0x436 <DIO_write_port+0x1c>
 41e:	83 34       	cpi	r24, 0x43	; 67
 420:	18 f4       	brcc	.+6      	; 0x428 <DIO_write_port+0xe>
 422:	81 34       	cpi	r24, 0x41	; 65
 424:	69 f4       	brne	.+26     	; 0x440 <DIO_write_port+0x26>
 426:	05 c0       	rjmp	.+10     	; 0x432 <DIO_write_port+0x18>
 428:	83 34       	cpi	r24, 0x43	; 67
 42a:	39 f0       	breq	.+14     	; 0x43a <DIO_write_port+0x20>
 42c:	84 34       	cpi	r24, 0x44	; 68
 42e:	41 f4       	brne	.+16     	; 0x440 <DIO_write_port+0x26>
 430:	06 c0       	rjmp	.+12     	; 0x43e <DIO_write_port+0x24>
	{
		case 'A' :
		PORTA=portvalue; //Write the given value to the port A
 432:	6b bb       	out	0x1b, r22	; 27
		break ;
 434:	08 95       	ret
		case 'B':
		PORTB=portvalue; //Write the given value to the port B
 436:	68 bb       	out	0x18, r22	; 24
		break ;
 438:	08 95       	ret
		case 'C' :
		PORTC=portvalue; //Write the given value to the port C
 43a:	65 bb       	out	0x15, r22	; 21
		break ;
 43c:	08 95       	ret
		case 'D':
		PORTD=portvalue; //Write the given value to the port D
 43e:	62 bb       	out	0x12, r22	; 18
 440:	08 95       	ret

00000442 <DIO_read_port>:
}

unsigned char DIO_read_port(unsigned char portname)
{
	unsigned char return_val=0;
	switch(portname)
 442:	82 34       	cpi	r24, 0x42	; 66
 444:	61 f0       	breq	.+24     	; 0x45e <DIO_read_port+0x1c>
 446:	83 34       	cpi	r24, 0x43	; 67
 448:	18 f4       	brcc	.+6      	; 0x450 <DIO_read_port+0xe>
 44a:	81 34       	cpi	r24, 0x41	; 65
 44c:	71 f4       	brne	.+28     	; 0x46a <DIO_read_port+0x28>
 44e:	05 c0       	rjmp	.+10     	; 0x45a <DIO_read_port+0x18>
 450:	83 34       	cpi	r24, 0x43	; 67
 452:	39 f0       	breq	.+14     	; 0x462 <DIO_read_port+0x20>
 454:	84 34       	cpi	r24, 0x44	; 68
 456:	49 f4       	brne	.+18     	; 0x46a <DIO_read_port+0x28>
 458:	06 c0       	rjmp	.+12     	; 0x466 <DIO_read_port+0x24>
	{
		case 'A' :
		return_val=PINA; // read the value of port A 
 45a:	89 b3       	in	r24, 0x19	; 25
		break ;
 45c:	08 95       	ret
		case 'B':
		return_val=PINB; // read the value of port B 
 45e:	86 b3       	in	r24, 0x16	; 22
		break ;
 460:	08 95       	ret
		case 'C' :
		return_val=PINC; // read the value of port C 
 462:	83 b3       	in	r24, 0x13	; 19
		break ;
 464:	08 95       	ret
		case 'D':
		return_val=PIND; // read the value of port D 
 466:	80 b3       	in	r24, 0x10	; 16
		break ;
 468:	08 95       	ret
	}
}

unsigned char DIO_read_port(unsigned char portname)
{
	unsigned char return_val=0;
 46a:	80 e0       	ldi	r24, 0x00	; 0
		break ;
		default:
		break ;
	}
	return return_val;
}
 46c:	08 95       	ret

0000046e <DIO_vconnectpullup>:

void DIO_vconnectpullup(char portname ,char pinnumber, char connect_pullup)
{
	switch(portname)
 46e:	82 34       	cpi	r24, 0x42	; 66
 470:	51 f1       	breq	.+84     	; 0x4c6 <DIO_vconnectpullup+0x58>
 472:	83 34       	cpi	r24, 0x43	; 67
 474:	20 f4       	brcc	.+8      	; 0x47e <DIO_vconnectpullup+0x10>
 476:	81 34       	cpi	r24, 0x41	; 65
 478:	09 f0       	breq	.+2      	; 0x47c <DIO_vconnectpullup+0xe>
 47a:	7b c0       	rjmp	.+246    	; 0x572 <DIO_vconnectpullup+0x104>
 47c:	07 c0       	rjmp	.+14     	; 0x48c <DIO_vconnectpullup+0x1e>
 47e:	83 34       	cpi	r24, 0x43	; 67
 480:	09 f4       	brne	.+2      	; 0x484 <DIO_vconnectpullup+0x16>
 482:	3e c0       	rjmp	.+124    	; 0x500 <DIO_vconnectpullup+0x92>
 484:	84 34       	cpi	r24, 0x44	; 68
 486:	09 f0       	breq	.+2      	; 0x48a <DIO_vconnectpullup+0x1c>
 488:	74 c0       	rjmp	.+232    	; 0x572 <DIO_vconnectpullup+0x104>
 48a:	57 c0       	rjmp	.+174    	; 0x53a <DIO_vconnectpullup+0xcc>
	{
		case 'A':
		if(connect_pullup==1)
 48c:	41 30       	cpi	r20, 0x01	; 1
 48e:	69 f4       	brne	.+26     	; 0x4aa <DIO_vconnectpullup+0x3c>
		{
			SET_BIT(PORTA,pinnumber);
 490:	2b b3       	in	r18, 0x1b	; 27
 492:	81 e0       	ldi	r24, 0x01	; 1
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	ac 01       	movw	r20, r24
 498:	02 c0       	rjmp	.+4      	; 0x49e <DIO_vconnectpullup+0x30>
 49a:	44 0f       	add	r20, r20
 49c:	55 1f       	adc	r21, r21
 49e:	6a 95       	dec	r22
 4a0:	e2 f7       	brpl	.-8      	; 0x49a <DIO_vconnectpullup+0x2c>
 4a2:	ba 01       	movw	r22, r20
 4a4:	62 2b       	or	r22, r18
 4a6:	6b bb       	out	0x1b, r22	; 27
 4a8:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);
 4aa:	2b b3       	in	r18, 0x1b	; 27
 4ac:	81 e0       	ldi	r24, 0x01	; 1
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	ac 01       	movw	r20, r24
 4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <DIO_vconnectpullup+0x4a>
 4b4:	44 0f       	add	r20, r20
 4b6:	55 1f       	adc	r21, r21
 4b8:	6a 95       	dec	r22
 4ba:	e2 f7       	brpl	.-8      	; 0x4b4 <DIO_vconnectpullup+0x46>
 4bc:	ba 01       	movw	r22, r20
 4be:	60 95       	com	r22
 4c0:	62 23       	and	r22, r18
 4c2:	6b bb       	out	0x1b, r22	; 27
 4c4:	08 95       	ret
		}
		break;
		case 'B':
		if(connect_pullup==1)
 4c6:	41 30       	cpi	r20, 0x01	; 1
 4c8:	69 f4       	brne	.+26     	; 0x4e4 <DIO_vconnectpullup+0x76>
		{
			SET_BIT(PORTB,pinnumber);
 4ca:	28 b3       	in	r18, 0x18	; 24
 4cc:	81 e0       	ldi	r24, 0x01	; 1
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	ac 01       	movw	r20, r24
 4d2:	02 c0       	rjmp	.+4      	; 0x4d8 <DIO_vconnectpullup+0x6a>
 4d4:	44 0f       	add	r20, r20
 4d6:	55 1f       	adc	r21, r21
 4d8:	6a 95       	dec	r22
 4da:	e2 f7       	brpl	.-8      	; 0x4d4 <DIO_vconnectpullup+0x66>
 4dc:	ba 01       	movw	r22, r20
 4de:	62 2b       	or	r22, r18
 4e0:	68 bb       	out	0x18, r22	; 24
 4e2:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);
 4e4:	28 b3       	in	r18, 0x18	; 24
 4e6:	81 e0       	ldi	r24, 0x01	; 1
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	ac 01       	movw	r20, r24
 4ec:	02 c0       	rjmp	.+4      	; 0x4f2 <DIO_vconnectpullup+0x84>
 4ee:	44 0f       	add	r20, r20
 4f0:	55 1f       	adc	r21, r21
 4f2:	6a 95       	dec	r22
 4f4:	e2 f7       	brpl	.-8      	; 0x4ee <DIO_vconnectpullup+0x80>
 4f6:	ba 01       	movw	r22, r20
 4f8:	60 95       	com	r22
 4fa:	62 23       	and	r22, r18
 4fc:	68 bb       	out	0x18, r22	; 24
 4fe:	08 95       	ret
		}
		break;
		case 'C':
		if(connect_pullup==1)
 500:	41 30       	cpi	r20, 0x01	; 1
 502:	69 f4       	brne	.+26     	; 0x51e <DIO_vconnectpullup+0xb0>
		{
			SET_BIT(PORTC,pinnumber);
 504:	25 b3       	in	r18, 0x15	; 21
 506:	81 e0       	ldi	r24, 0x01	; 1
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	ac 01       	movw	r20, r24
 50c:	02 c0       	rjmp	.+4      	; 0x512 <DIO_vconnectpullup+0xa4>
 50e:	44 0f       	add	r20, r20
 510:	55 1f       	adc	r21, r21
 512:	6a 95       	dec	r22
 514:	e2 f7       	brpl	.-8      	; 0x50e <DIO_vconnectpullup+0xa0>
 516:	ba 01       	movw	r22, r20
 518:	62 2b       	or	r22, r18
 51a:	65 bb       	out	0x15, r22	; 21
 51c:	08 95       	ret
			
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);
 51e:	25 b3       	in	r18, 0x15	; 21
 520:	81 e0       	ldi	r24, 0x01	; 1
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	ac 01       	movw	r20, r24
 526:	02 c0       	rjmp	.+4      	; 0x52c <DIO_vconnectpullup+0xbe>
 528:	44 0f       	add	r20, r20
 52a:	55 1f       	adc	r21, r21
 52c:	6a 95       	dec	r22
 52e:	e2 f7       	brpl	.-8      	; 0x528 <DIO_vconnectpullup+0xba>
 530:	ba 01       	movw	r22, r20
 532:	60 95       	com	r22
 534:	62 23       	and	r22, r18
 536:	65 bb       	out	0x15, r22	; 21
 538:	08 95       	ret
		}
		break;
		case 'D':
		if(connect_pullup==1)
 53a:	41 30       	cpi	r20, 0x01	; 1
 53c:	69 f4       	brne	.+26     	; 0x558 <DIO_vconnectpullup+0xea>
		{
			SET_BIT(PORTD,pinnumber);
 53e:	22 b3       	in	r18, 0x12	; 18
 540:	81 e0       	ldi	r24, 0x01	; 1
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	ac 01       	movw	r20, r24
 546:	02 c0       	rjmp	.+4      	; 0x54c <DIO_vconnectpullup+0xde>
 548:	44 0f       	add	r20, r20
 54a:	55 1f       	adc	r21, r21
 54c:	6a 95       	dec	r22
 54e:	e2 f7       	brpl	.-8      	; 0x548 <DIO_vconnectpullup+0xda>
 550:	ba 01       	movw	r22, r20
 552:	62 2b       	or	r22, r18
 554:	62 bb       	out	0x12, r22	; 18
 556:	08 95       	ret
			
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);
 558:	22 b3       	in	r18, 0x12	; 18
 55a:	81 e0       	ldi	r24, 0x01	; 1
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	ac 01       	movw	r20, r24
 560:	02 c0       	rjmp	.+4      	; 0x566 <DIO_vconnectpullup+0xf8>
 562:	44 0f       	add	r20, r20
 564:	55 1f       	adc	r21, r21
 566:	6a 95       	dec	r22
 568:	e2 f7       	brpl	.-8      	; 0x562 <DIO_vconnectpullup+0xf4>
 56a:	ba 01       	movw	r22, r20
 56c:	60 95       	com	r22
 56e:	62 23       	and	r22, r18
 570:	62 bb       	out	0x12, r22	; 18
 572:	08 95       	ret

00000574 <write_low_nibble>:
	}
}

void write_low_nibble(unsigned char portname,unsigned char value)
{
	value&=0x0f;
 574:	6f 70       	andi	r22, 0x0F	; 15
	switch(portname)
 576:	82 34       	cpi	r24, 0x42	; 66
 578:	81 f0       	breq	.+32     	; 0x59a <write_low_nibble+0x26>
 57a:	83 34       	cpi	r24, 0x43	; 67
 57c:	18 f4       	brcc	.+6      	; 0x584 <write_low_nibble+0x10>
 57e:	81 34       	cpi	r24, 0x41	; 65
 580:	f1 f4       	brne	.+60     	; 0x5be <write_low_nibble+0x4a>
 582:	05 c0       	rjmp	.+10     	; 0x58e <write_low_nibble+0x1a>
 584:	83 34       	cpi	r24, 0x43	; 67
 586:	79 f0       	breq	.+30     	; 0x5a6 <write_low_nibble+0x32>
 588:	84 34       	cpi	r24, 0x44	; 68
 58a:	c9 f4       	brne	.+50     	; 0x5be <write_low_nibble+0x4a>
 58c:	12 c0       	rjmp	.+36     	; 0x5b2 <write_low_nibble+0x3e>
	{
		case 'A':
		PORTA&=0xf0;
 58e:	8b b3       	in	r24, 0x1b	; 27
 590:	80 7f       	andi	r24, 0xF0	; 240
 592:	8b bb       	out	0x1b, r24	; 27
		PORTA|=value;
 594:	8b b3       	in	r24, 0x1b	; 27
 596:	86 2b       	or	r24, r22
 598:	8b bb       	out	0x1b, r24	; 27
		case 'B':
		PORTB&=0xf0;
 59a:	88 b3       	in	r24, 0x18	; 24
 59c:	80 7f       	andi	r24, 0xF0	; 240
 59e:	88 bb       	out	0x18, r24	; 24
		PORTB|=value;
 5a0:	88 b3       	in	r24, 0x18	; 24
 5a2:	86 2b       	or	r24, r22
 5a4:	88 bb       	out	0x18, r24	; 24
		case 'C':
		PORTC&=0xf0;
 5a6:	85 b3       	in	r24, 0x15	; 21
 5a8:	80 7f       	andi	r24, 0xF0	; 240
 5aa:	85 bb       	out	0x15, r24	; 21
		PORTC|=value;
 5ac:	85 b3       	in	r24, 0x15	; 21
 5ae:	86 2b       	or	r24, r22
 5b0:	85 bb       	out	0x15, r24	; 21
		case 'D':
		PORTD&=0xf0;
 5b2:	82 b3       	in	r24, 0x12	; 18
 5b4:	80 7f       	andi	r24, 0xF0	; 240
 5b6:	82 bb       	out	0x12, r24	; 18
		PORTD|=value;
 5b8:	82 b3       	in	r24, 0x12	; 18
 5ba:	68 2b       	or	r22, r24
 5bc:	62 bb       	out	0x12, r22	; 18
 5be:	08 95       	ret

000005c0 <write_high_nibble>:
	}
}

void write_high_nibble(unsigned char portname,unsigned char value)
{
	value<<=4;
 5c0:	62 95       	swap	r22
 5c2:	60 7f       	andi	r22, 0xF0	; 240
	switch(portname)
 5c4:	82 34       	cpi	r24, 0x42	; 66
 5c6:	81 f0       	breq	.+32     	; 0x5e8 <write_high_nibble+0x28>
 5c8:	83 34       	cpi	r24, 0x43	; 67
 5ca:	18 f4       	brcc	.+6      	; 0x5d2 <write_high_nibble+0x12>
 5cc:	81 34       	cpi	r24, 0x41	; 65
 5ce:	f1 f4       	brne	.+60     	; 0x60c <write_high_nibble+0x4c>
 5d0:	05 c0       	rjmp	.+10     	; 0x5dc <write_high_nibble+0x1c>
 5d2:	83 34       	cpi	r24, 0x43	; 67
 5d4:	79 f0       	breq	.+30     	; 0x5f4 <write_high_nibble+0x34>
 5d6:	84 34       	cpi	r24, 0x44	; 68
 5d8:	c9 f4       	brne	.+50     	; 0x60c <write_high_nibble+0x4c>
 5da:	12 c0       	rjmp	.+36     	; 0x600 <write_high_nibble+0x40>
	{
		case 'A':
		PORTA&=0x0f;
 5dc:	8b b3       	in	r24, 0x1b	; 27
 5de:	8f 70       	andi	r24, 0x0F	; 15
 5e0:	8b bb       	out	0x1b, r24	; 27
		PORTA|=value;
 5e2:	8b b3       	in	r24, 0x1b	; 27
 5e4:	86 2b       	or	r24, r22
 5e6:	8b bb       	out	0x1b, r24	; 27
		case 'B':
		PORTB&=0x0f;
 5e8:	88 b3       	in	r24, 0x18	; 24
 5ea:	8f 70       	andi	r24, 0x0F	; 15
 5ec:	88 bb       	out	0x18, r24	; 24
		PORTB|=value;
 5ee:	88 b3       	in	r24, 0x18	; 24
 5f0:	86 2b       	or	r24, r22
 5f2:	88 bb       	out	0x18, r24	; 24
		case 'C':
		PORTC&=0x0f;
 5f4:	85 b3       	in	r24, 0x15	; 21
 5f6:	8f 70       	andi	r24, 0x0F	; 15
 5f8:	85 bb       	out	0x15, r24	; 21
		PORTC|=value;
 5fa:	85 b3       	in	r24, 0x15	; 21
 5fc:	86 2b       	or	r24, r22
 5fe:	85 bb       	out	0x15, r24	; 21
		case 'D':
		PORTD&=0x0f;
 600:	82 b3       	in	r24, 0x12	; 18
 602:	8f 70       	andi	r24, 0x0F	; 15
 604:	82 bb       	out	0x12, r24	; 18
		PORTD|=value;
 606:	82 b3       	in	r24, 0x12	; 18
 608:	68 2b       	or	r22, r24
 60a:	62 bb       	out	0x12, r22	; 18
 60c:	08 95       	ret

0000060e <send_falling_edge>:
}


static void send_falling_edge(void)
{
	DIO_write('B',EN,1);
 60e:	82 e4       	ldi	r24, 0x42	; 66
 610:	60 e0       	ldi	r22, 0x00	; 0
 612:	41 e0       	ldi	r20, 0x01	; 1
 614:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 618:	8f e9       	ldi	r24, 0x9F	; 159
 61a:	9f e0       	ldi	r25, 0x0F	; 15
 61c:	01 97       	sbiw	r24, 0x01	; 1
 61e:	f1 f7       	brne	.-4      	; 0x61c <send_falling_edge+0xe>
 620:	00 c0       	rjmp	.+0      	; 0x622 <send_falling_edge+0x14>
 622:	00 00       	nop
	_delay_ms(2);
	DIO_write('B',EN,0);
 624:	82 e4       	ldi	r24, 0x42	; 66
 626:	60 e0       	ldi	r22, 0x00	; 0
 628:	40 e0       	ldi	r20, 0x00	; 0
 62a:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_write>
 62e:	8f e9       	ldi	r24, 0x9F	; 159
 630:	9f e0       	ldi	r25, 0x0F	; 15
 632:	01 97       	sbiw	r24, 0x01	; 1
 634:	f1 f7       	brne	.-4      	; 0x632 <send_falling_edge+0x24>
 636:	00 c0       	rjmp	.+0      	; 0x638 <send_falling_edge+0x2a>
 638:	00 00       	nop
	_delay_ms(2);
}
 63a:	08 95       	ret

0000063c <LCD_vSend_cmd>:
void LCD_vSend_cmd(char cmd)
{
 63c:	cf 93       	push	r28
 63e:	c8 2f       	mov	r28, r24
	DIO_write_port('A',cmd);
	DIO_write('B',RS,0);
	send_falling_edge();
	
	#elif defined four_bits_mode
	write_high_nibble('D',cmd>>4);
 640:	68 2f       	mov	r22, r24
 642:	62 95       	swap	r22
 644:	6f 70       	andi	r22, 0x0F	; 15
 646:	84 e4       	ldi	r24, 0x44	; 68
 648:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <write_high_nibble>
	DIO_write('B',RS,0);
 64c:	82 e4       	ldi	r24, 0x42	; 66
 64e:	61 e0       	ldi	r22, 0x01	; 1
 650:	40 e0       	ldi	r20, 0x00	; 0
 652:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_write>
	send_falling_edge();
 656:	0e 94 07 03 	call	0x60e	; 0x60e <send_falling_edge>
	write_high_nibble('D',cmd);
 65a:	84 e4       	ldi	r24, 0x44	; 68
 65c:	6c 2f       	mov	r22, r28
 65e:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <write_high_nibble>
	DIO_write('B',RS,0);
 662:	82 e4       	ldi	r24, 0x42	; 66
 664:	61 e0       	ldi	r22, 0x01	; 1
 666:	40 e0       	ldi	r20, 0x00	; 0
 668:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_write>
	send_falling_edge();
 66c:	0e 94 07 03 	call	0x60e	; 0x60e <send_falling_edge>
 670:	8f ec       	ldi	r24, 0xCF	; 207
 672:	97 e0       	ldi	r25, 0x07	; 7
 674:	01 97       	sbiw	r24, 0x01	; 1
 676:	f1 f7       	brne	.-4      	; 0x674 <LCD_vSend_cmd+0x38>
 678:	00 c0       	rjmp	.+0      	; 0x67a <LCD_vSend_cmd+0x3e>
 67a:	00 00       	nop
	#endif
	_delay_ms(1);
}
 67c:	cf 91       	pop	r28
 67e:	08 95       	ret

00000680 <LCD_vInit>:
 680:	8f ef       	ldi	r24, 0xFF	; 255
 682:	91 ee       	ldi	r25, 0xE1	; 225
 684:	a4 e0       	ldi	r26, 0x04	; 4
 686:	81 50       	subi	r24, 0x01	; 1
 688:	90 40       	sbci	r25, 0x00	; 0
 68a:	a0 40       	sbci	r26, 0x00	; 0
 68c:	e1 f7       	brne	.-8      	; 0x686 <LCD_vInit+0x6>
 68e:	00 c0       	rjmp	.+0      	; 0x690 <LCD_vInit+0x10>
 690:	00 00       	nop
	_delay_ms(10);
	LCD_vSend_cmd(ENTRY_MODE); //entry mode
	_delay_ms(1); 
	
	#elif defined four_bits_mode
	DIO_vsetPINDir('D',4,1);
 692:	84 e4       	ldi	r24, 0x44	; 68
 694:	64 e0       	ldi	r22, 0x04	; 4
 696:	41 e0       	ldi	r20, 0x01	; 1
 698:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_vsetPINDir>
	DIO_vsetPINDir('D',5,1);
 69c:	84 e4       	ldi	r24, 0x44	; 68
 69e:	65 e0       	ldi	r22, 0x05	; 5
 6a0:	41 e0       	ldi	r20, 0x01	; 1
 6a2:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_vsetPINDir>
	DIO_vsetPINDir('D',6,1);
 6a6:	84 e4       	ldi	r24, 0x44	; 68
 6a8:	66 e0       	ldi	r22, 0x06	; 6
 6aa:	41 e0       	ldi	r20, 0x01	; 1
 6ac:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_vsetPINDir>
	DIO_vsetPINDir('D',7,1);
 6b0:	84 e4       	ldi	r24, 0x44	; 68
 6b2:	67 e0       	ldi	r22, 0x07	; 7
 6b4:	41 e0       	ldi	r20, 0x01	; 1
 6b6:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_vsetPINDir>
	DIO_vsetPINDir('B',EN,1);
 6ba:	82 e4       	ldi	r24, 0x42	; 66
 6bc:	60 e0       	ldi	r22, 0x00	; 0
 6be:	41 e0       	ldi	r20, 0x01	; 1
 6c0:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_vsetPINDir>
	DIO_vsetPINDir('B',RW,1);
 6c4:	82 e4       	ldi	r24, 0x42	; 66
 6c6:	62 e0       	ldi	r22, 0x02	; 2
 6c8:	41 e0       	ldi	r20, 0x01	; 1
 6ca:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_vsetPINDir>
	DIO_vsetPINDir('B',RS,1);
 6ce:	82 e4       	ldi	r24, 0x42	; 66
 6d0:	61 e0       	ldi	r22, 0x01	; 1
 6d2:	41 e0       	ldi	r20, 0x01	; 1
 6d4:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_vsetPINDir>
   	DIO_write('B',RW,0);
 6d8:	82 e4       	ldi	r24, 0x42	; 66
 6da:	62 e0       	ldi	r22, 0x02	; 2
 6dc:	40 e0       	ldi	r20, 0x00	; 0
 6de:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_write>
	LCD_vSend_cmd(RETURN_HOME); //return home
 6e2:	82 e0       	ldi	r24, 0x02	; 2
 6e4:	0e 94 1e 03 	call	0x63c	; 0x63c <LCD_vSend_cmd>
 6e8:	af e1       	ldi	r26, 0x1F	; 31
 6ea:	be e4       	ldi	r27, 0x4E	; 78
 6ec:	11 97       	sbiw	r26, 0x01	; 1
 6ee:	f1 f7       	brne	.-4      	; 0x6ec <LCD_vInit+0x6c>
 6f0:	00 c0       	rjmp	.+0      	; 0x6f2 <LCD_vInit+0x72>
 6f2:	00 00       	nop
	_delay_ms(10);
	LCD_vSend_cmd(FOUR_BITS); //4bit mode
 6f4:	88 e2       	ldi	r24, 0x28	; 40
 6f6:	0e 94 1e 03 	call	0x63c	; 0x63c <LCD_vSend_cmd>
 6fa:	8f ec       	ldi	r24, 0xCF	; 207
 6fc:	97 e0       	ldi	r25, 0x07	; 7
 6fe:	01 97       	sbiw	r24, 0x01	; 1
 700:	f1 f7       	brne	.-4      	; 0x6fe <LCD_vInit+0x7e>
 702:	00 c0       	rjmp	.+0      	; 0x704 <LCD_vInit+0x84>
 704:	00 00       	nop
	_delay_ms(1);
	LCD_vSend_cmd(CURSOR_ON_DISPLAN_ON);//display on cursor on
 706:	8e e0       	ldi	r24, 0x0E	; 14
 708:	0e 94 1e 03 	call	0x63c	; 0x63c <LCD_vSend_cmd>
 70c:	af ec       	ldi	r26, 0xCF	; 207
 70e:	b7 e0       	ldi	r27, 0x07	; 7
 710:	11 97       	sbiw	r26, 0x01	; 1
 712:	f1 f7       	brne	.-4      	; 0x710 <LCD_vInit+0x90>
 714:	00 c0       	rjmp	.+0      	; 0x716 <LCD_vInit+0x96>
 716:	00 00       	nop
	_delay_ms(1);
	LCD_vSend_cmd(CLR_SCREEN);//clear the screen
 718:	81 e0       	ldi	r24, 0x01	; 1
 71a:	0e 94 1e 03 	call	0x63c	; 0x63c <LCD_vSend_cmd>
 71e:	8f e1       	ldi	r24, 0x1F	; 31
 720:	9e e4       	ldi	r25, 0x4E	; 78
 722:	01 97       	sbiw	r24, 0x01	; 1
 724:	f1 f7       	brne	.-4      	; 0x722 <LCD_vInit+0xa2>
 726:	00 c0       	rjmp	.+0      	; 0x728 <LCD_vInit+0xa8>
 728:	00 00       	nop
	_delay_ms(10);
	LCD_vSend_cmd(ENTRY_MODE); //entry mode
 72a:	86 e0       	ldi	r24, 0x06	; 6
 72c:	0e 94 1e 03 	call	0x63c	; 0x63c <LCD_vSend_cmd>
 730:	af ec       	ldi	r26, 0xCF	; 207
 732:	b7 e0       	ldi	r27, 0x07	; 7
 734:	11 97       	sbiw	r26, 0x01	; 1
 736:	f1 f7       	brne	.-4      	; 0x734 <LCD_vInit+0xb4>
 738:	00 c0       	rjmp	.+0      	; 0x73a <LCD_vInit+0xba>
 73a:	00 00       	nop
	_delay_ms(1);
	#endif
}
 73c:	08 95       	ret

0000073e <LCD_vSend_char>:
	#endif
	_delay_ms(1);
}

void LCD_vSend_char(char data)
{
 73e:	cf 93       	push	r28
 740:	c8 2f       	mov	r28, r24
	DIO_write_port('A',data);
	DIO_write('B',RS,1);
	send_falling_edge();
	
	#elif defined four_bits_mode
	write_high_nibble('D',data>>4);
 742:	68 2f       	mov	r22, r24
 744:	62 95       	swap	r22
 746:	6f 70       	andi	r22, 0x0F	; 15
 748:	84 e4       	ldi	r24, 0x44	; 68
 74a:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <write_high_nibble>
	DIO_write('B',RS,1);
 74e:	82 e4       	ldi	r24, 0x42	; 66
 750:	61 e0       	ldi	r22, 0x01	; 1
 752:	41 e0       	ldi	r20, 0x01	; 1
 754:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_write>
	send_falling_edge();
 758:	0e 94 07 03 	call	0x60e	; 0x60e <send_falling_edge>
	write_high_nibble('D',data);
 75c:	84 e4       	ldi	r24, 0x44	; 68
 75e:	6c 2f       	mov	r22, r28
 760:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <write_high_nibble>
	DIO_write('B',RS,1);
 764:	82 e4       	ldi	r24, 0x42	; 66
 766:	61 e0       	ldi	r22, 0x01	; 1
 768:	41 e0       	ldi	r20, 0x01	; 1
 76a:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_write>
	send_falling_edge();
 76e:	0e 94 07 03 	call	0x60e	; 0x60e <send_falling_edge>
 772:	8f ec       	ldi	r24, 0xCF	; 207
 774:	97 e0       	ldi	r25, 0x07	; 7
 776:	01 97       	sbiw	r24, 0x01	; 1
 778:	f1 f7       	brne	.-4      	; 0x776 <LCD_vSend_char+0x38>
 77a:	00 c0       	rjmp	.+0      	; 0x77c <LCD_vSend_char+0x3e>
 77c:	00 00       	nop
	#endif
	_delay_ms(1);
}
 77e:	cf 91       	pop	r28
 780:	08 95       	ret

00000782 <LCD_vSend_string>:


void LCD_vSend_string(char *data)
{
 782:	cf 93       	push	r28
 784:	df 93       	push	r29
 786:	ec 01       	movw	r28, r24
	while((*data)!='\0')
 788:	88 81       	ld	r24, Y
 78a:	88 23       	and	r24, r24
 78c:	31 f0       	breq	.+12     	; 0x79a <LCD_vSend_string+0x18>
	#endif
	_delay_ms(1);
}


void LCD_vSend_string(char *data)
 78e:	21 96       	adiw	r28, 0x01	; 1
{
	while((*data)!='\0')
	{
		LCD_vSend_char(*data);
 790:	0e 94 9f 03 	call	0x73e	; 0x73e <LCD_vSend_char>
}


void LCD_vSend_string(char *data)
{
	while((*data)!='\0')
 794:	89 91       	ld	r24, Y+
 796:	88 23       	and	r24, r24
 798:	d9 f7       	brne	.-10     	; 0x790 <LCD_vSend_string+0xe>
	{
		LCD_vSend_char(*data);
		data++;
	}
}
 79a:	df 91       	pop	r29
 79c:	cf 91       	pop	r28
 79e:	08 95       	ret

000007a0 <LCD_clearscreen>:
void LCD_clearscreen()
{
	LCD_vSend_cmd(CLR_SCREEN);
 7a0:	81 e0       	ldi	r24, 0x01	; 1
 7a2:	0e 94 1e 03 	call	0x63c	; 0x63c <LCD_vSend_cmd>
 7a6:	8f e1       	ldi	r24, 0x1F	; 31
 7a8:	9e e4       	ldi	r25, 0x4E	; 78
 7aa:	01 97       	sbiw	r24, 0x01	; 1
 7ac:	f1 f7       	brne	.-4      	; 0x7aa <LCD_clearscreen+0xa>
 7ae:	00 c0       	rjmp	.+0      	; 0x7b0 <LCD_clearscreen+0x10>
 7b0:	00 00       	nop
	_delay_ms(10);
}
 7b2:	08 95       	ret

000007b4 <LCD_movecursor>:
void LCD_movecursor(char row,char coloumn)
{
	char data ;
	if(row>2||row<1||coloumn>16||coloumn<1)
 7b4:	28 2f       	mov	r18, r24
 7b6:	21 50       	subi	r18, 0x01	; 1
 7b8:	22 30       	cpi	r18, 0x02	; 2
 7ba:	70 f4       	brcc	.+28     	; 0x7d8 <LCD_movecursor+0x24>
 7bc:	61 31       	cpi	r22, 0x11	; 17
 7be:	70 f4       	brcc	.+28     	; 0x7dc <LCD_movecursor+0x28>
 7c0:	66 23       	and	r22, r22
 7c2:	71 f0       	breq	.+28     	; 0x7e0 <LCD_movecursor+0x2c>
	{
		data=0x80;
	}
	else if(row==1)
 7c4:	81 30       	cpi	r24, 0x01	; 1
 7c6:	19 f4       	brne	.+6      	; 0x7ce <LCD_movecursor+0x1a>
	{
		data=0x80+coloumn-1 ;
 7c8:	96 2f       	mov	r25, r22
 7ca:	91 58       	subi	r25, 0x81	; 129
 7cc:	0a c0       	rjmp	.+20     	; 0x7e2 <LCD_movecursor+0x2e>
	}
	else if (row==2)
 7ce:	82 30       	cpi	r24, 0x02	; 2
 7d0:	41 f4       	brne	.+16     	; 0x7e2 <LCD_movecursor+0x2e>
	{
		data=0xc0+coloumn-1;
 7d2:	96 2f       	mov	r25, r22
 7d4:	91 54       	subi	r25, 0x41	; 65
 7d6:	05 c0       	rjmp	.+10     	; 0x7e2 <LCD_movecursor+0x2e>
void LCD_movecursor(char row,char coloumn)
{
	char data ;
	if(row>2||row<1||coloumn>16||coloumn<1)
	{
		data=0x80;
 7d8:	90 e8       	ldi	r25, 0x80	; 128
 7da:	03 c0       	rjmp	.+6      	; 0x7e2 <LCD_movecursor+0x2e>
 7dc:	90 e8       	ldi	r25, 0x80	; 128
 7de:	01 c0       	rjmp	.+2      	; 0x7e2 <LCD_movecursor+0x2e>
 7e0:	90 e8       	ldi	r25, 0x80	; 128
	}
	else if (row==2)
	{
		data=0xc0+coloumn-1;
	}
	LCD_vSend_cmd(data);
 7e2:	89 2f       	mov	r24, r25
 7e4:	0e 94 1e 03 	call	0x63c	; 0x63c <LCD_vSend_cmd>
 7e8:	8f ec       	ldi	r24, 0xCF	; 207
 7ea:	97 e0       	ldi	r25, 0x07	; 7
 7ec:	01 97       	sbiw	r24, 0x01	; 1
 7ee:	f1 f7       	brne	.-4      	; 0x7ec <LCD_movecursor+0x38>
 7f0:	00 c0       	rjmp	.+0      	; 0x7f2 <LCD_movecursor+0x3e>
 7f2:	00 00       	nop
	_delay_ms(1);
}
 7f4:	08 95       	ret

000007f6 <main>:
#include "LCD.h"
char read_val;
unsigned short temperatue;
int main(void)
{
	DIO_vsetPINDir('D',0,1);
 7f6:	84 e4       	ldi	r24, 0x44	; 68
 7f8:	60 e0       	ldi	r22, 0x00	; 0
 7fa:	41 e0       	ldi	r20, 0x01	; 1
 7fc:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_vsetPINDir>
	DIO_vsetPINDir('D',1,1);
 800:	84 e4       	ldi	r24, 0x44	; 68
 802:	61 e0       	ldi	r22, 0x01	; 1
 804:	41 e0       	ldi	r20, 0x01	; 1
 806:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_vsetPINDir>
	LCD_vInit();
 80a:	0e 94 40 03 	call	0x680	; 0x680 <LCD_vInit>
	ADC_vinit();
 80e:	0e 94 49 00 	call	0x92	; 0x92 <ADC_vinit>
	 LCD_vSend_string("temperature=");
 812:	80 e6       	ldi	r24, 0x60	; 96
 814:	90 e0       	ldi	r25, 0x00	; 0
 816:	0e 94 c1 03 	call	0x782	; 0x782 <LCD_vSend_string>
		
		if(temperatue<10)
		{
			LCD_movecursor(1,13);
			LCD_vSend_char(30);
			LCD_vSend_char((temperatue%10)+48);
 81a:	ca e0       	ldi	r28, 0x0A	; 10
 81c:	d0 e0       	ldi	r29, 0x00	; 0
	ADC_vinit();
	 LCD_vSend_string("temperature=");
    while(1)
    {
		
        temperatue=(ADC_u16Read()*0.25);
 81e:	0e 94 4f 00 	call	0x9e	; 0x9e <ADC_u16Read>
 822:	bc 01       	movw	r22, r24
 824:	80 e0       	ldi	r24, 0x00	; 0
 826:	90 e0       	ldi	r25, 0x00	; 0
 828:	0e 94 ae 04 	call	0x95c	; 0x95c <__floatunsisf>
 82c:	20 e0       	ldi	r18, 0x00	; 0
 82e:	30 e0       	ldi	r19, 0x00	; 0
 830:	40 e8       	ldi	r20, 0x80	; 128
 832:	5e e3       	ldi	r21, 0x3E	; 62
 834:	0e 94 14 05 	call	0xa28	; 0xa28 <__mulsf3>
 838:	0e 94 82 04 	call	0x904	; 0x904 <__fixunssfsi>
 83c:	ab 01       	movw	r20, r22
 83e:	bc 01       	movw	r22, r24
 840:	50 93 6f 00 	sts	0x006F, r21
 844:	40 93 6e 00 	sts	0x006E, r20
		
		if(temperatue<10)
 848:	4a 30       	cpi	r20, 0x0A	; 10
 84a:	51 05       	cpc	r21, r1
 84c:	c0 f4       	brcc	.+48     	; 0x87e <__stack+0x1f>
		{
			LCD_movecursor(1,13);
 84e:	81 e0       	ldi	r24, 0x01	; 1
 850:	6d e0       	ldi	r22, 0x0D	; 13
 852:	0e 94 da 03 	call	0x7b4	; 0x7b4 <LCD_movecursor>
			LCD_vSend_char(30);
 856:	8e e1       	ldi	r24, 0x1E	; 30
 858:	0e 94 9f 03 	call	0x73e	; 0x73e <LCD_vSend_char>
			LCD_vSend_char((temperatue%10)+48);
 85c:	80 91 6e 00 	lds	r24, 0x006E
 860:	90 91 6f 00 	lds	r25, 0x006F
 864:	be 01       	movw	r22, r28
 866:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__udivmodhi4>
 86a:	80 5d       	subi	r24, 0xD0	; 208
 86c:	0e 94 9f 03 	call	0x73e	; 0x73e <LCD_vSend_char>
			LCD_vSend_char(0xDF);
 870:	8f ed       	ldi	r24, 0xDF	; 223
 872:	0e 94 9f 03 	call	0x73e	; 0x73e <LCD_vSend_char>
			LCD_vSend_char('c');
 876:	83 e6       	ldi	r24, 0x63	; 99
 878:	0e 94 9f 03 	call	0x73e	; 0x73e <LCD_vSend_char>
 87c:	d0 cf       	rjmp	.-96     	; 0x81e <main+0x28>
		}
		else if( temperatue<100)
 87e:	44 36       	cpi	r20, 0x64	; 100
 880:	51 05       	cpc	r21, r1
 882:	68 f6       	brcc	.-102    	; 0x81e <main+0x28>
		{
		LCD_movecursor(1,13);
 884:	81 e0       	ldi	r24, 0x01	; 1
 886:	6d e0       	ldi	r22, 0x0D	; 13
 888:	0e 94 da 03 	call	0x7b4	; 0x7b4 <LCD_movecursor>
		LCD_vSend_char((temperatue/10)+48);
 88c:	80 91 6e 00 	lds	r24, 0x006E
 890:	90 91 6f 00 	lds	r25, 0x006F
 894:	be 01       	movw	r22, r28
 896:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__udivmodhi4>
 89a:	86 2f       	mov	r24, r22
 89c:	80 5d       	subi	r24, 0xD0	; 208
 89e:	0e 94 9f 03 	call	0x73e	; 0x73e <LCD_vSend_char>
		LCD_vSend_char((temperatue%10)+48);
 8a2:	80 91 6e 00 	lds	r24, 0x006E
 8a6:	90 91 6f 00 	lds	r25, 0x006F
 8aa:	be 01       	movw	r22, r28
 8ac:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__udivmodhi4>
 8b0:	80 5d       	subi	r24, 0xD0	; 208
 8b2:	0e 94 9f 03 	call	0x73e	; 0x73e <LCD_vSend_char>
		LCD_vSend_char(0XDF);
 8b6:	8f ed       	ldi	r24, 0xDF	; 223
 8b8:	0e 94 9f 03 	call	0x73e	; 0x73e <LCD_vSend_char>
		LCD_vSend_char('c');
 8bc:	83 e6       	ldi	r24, 0x63	; 99
 8be:	0e 94 9f 03 	call	0x73e	; 0x73e <LCD_vSend_char>
		
			if(temperatue<20)
 8c2:	80 91 6e 00 	lds	r24, 0x006E
 8c6:	90 91 6f 00 	lds	r25, 0x006F
 8ca:	84 31       	cpi	r24, 0x14	; 20
 8cc:	91 05       	cpc	r25, r1
 8ce:	30 f4       	brcc	.+12     	; 0x8dc <__stack+0x7d>
			{
				DIO_write('D',1,1);
 8d0:	84 e4       	ldi	r24, 0x44	; 68
 8d2:	61 e0       	ldi	r22, 0x01	; 1
 8d4:	41 e0       	ldi	r20, 0x01	; 1
 8d6:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_write>
 8da:	a1 cf       	rjmp	.-190    	; 0x81e <main+0x28>
			}
			else if (temperatue>30)
 8dc:	8f 31       	cpi	r24, 0x1F	; 31
 8de:	91 05       	cpc	r25, r1
 8e0:	30 f0       	brcs	.+12     	; 0x8ee <__stack+0x8f>
			{
				DIO_write('D',0,1);
 8e2:	84 e4       	ldi	r24, 0x44	; 68
 8e4:	60 e0       	ldi	r22, 0x00	; 0
 8e6:	41 e0       	ldi	r20, 0x01	; 1
 8e8:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_write>
 8ec:	98 cf       	rjmp	.-208    	; 0x81e <main+0x28>
			}
			else
			{
				DIO_write('D',0,0);
 8ee:	84 e4       	ldi	r24, 0x44	; 68
 8f0:	60 e0       	ldi	r22, 0x00	; 0
 8f2:	40 e0       	ldi	r20, 0x00	; 0
 8f4:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_write>
				DIO_write('D',1,0);
 8f8:	84 e4       	ldi	r24, 0x44	; 68
 8fa:	61 e0       	ldi	r22, 0x01	; 1
 8fc:	40 e0       	ldi	r20, 0x00	; 0
 8fe:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_write>
 902:	8d cf       	rjmp	.-230    	; 0x81e <main+0x28>

00000904 <__fixunssfsi>:
 904:	70 d0       	rcall	.+224    	; 0x9e6 <__fp_splitA>
 906:	88 f0       	brcs	.+34     	; 0x92a <__fixunssfsi+0x26>
 908:	9f 57       	subi	r25, 0x7F	; 127
 90a:	90 f0       	brcs	.+36     	; 0x930 <__fixunssfsi+0x2c>
 90c:	b9 2f       	mov	r27, r25
 90e:	99 27       	eor	r25, r25
 910:	b7 51       	subi	r27, 0x17	; 23
 912:	a0 f0       	brcs	.+40     	; 0x93c <__fixunssfsi+0x38>
 914:	d1 f0       	breq	.+52     	; 0x94a <__fixunssfsi+0x46>
 916:	66 0f       	add	r22, r22
 918:	77 1f       	adc	r23, r23
 91a:	88 1f       	adc	r24, r24
 91c:	99 1f       	adc	r25, r25
 91e:	1a f0       	brmi	.+6      	; 0x926 <__fixunssfsi+0x22>
 920:	ba 95       	dec	r27
 922:	c9 f7       	brne	.-14     	; 0x916 <__fixunssfsi+0x12>
 924:	12 c0       	rjmp	.+36     	; 0x94a <__fixunssfsi+0x46>
 926:	b1 30       	cpi	r27, 0x01	; 1
 928:	81 f0       	breq	.+32     	; 0x94a <__fixunssfsi+0x46>
 92a:	77 d0       	rcall	.+238    	; 0xa1a <__fp_zero>
 92c:	b1 e0       	ldi	r27, 0x01	; 1
 92e:	08 95       	ret
 930:	74 c0       	rjmp	.+232    	; 0xa1a <__fp_zero>
 932:	67 2f       	mov	r22, r23
 934:	78 2f       	mov	r23, r24
 936:	88 27       	eor	r24, r24
 938:	b8 5f       	subi	r27, 0xF8	; 248
 93a:	39 f0       	breq	.+14     	; 0x94a <__fixunssfsi+0x46>
 93c:	b9 3f       	cpi	r27, 0xF9	; 249
 93e:	cc f3       	brlt	.-14     	; 0x932 <__fixunssfsi+0x2e>
 940:	86 95       	lsr	r24
 942:	77 95       	ror	r23
 944:	67 95       	ror	r22
 946:	b3 95       	inc	r27
 948:	d9 f7       	brne	.-10     	; 0x940 <__fixunssfsi+0x3c>
 94a:	3e f4       	brtc	.+14     	; 0x95a <__fixunssfsi+0x56>
 94c:	90 95       	com	r25
 94e:	80 95       	com	r24
 950:	70 95       	com	r23
 952:	61 95       	neg	r22
 954:	7f 4f       	sbci	r23, 0xFF	; 255
 956:	8f 4f       	sbci	r24, 0xFF	; 255
 958:	9f 4f       	sbci	r25, 0xFF	; 255
 95a:	08 95       	ret

0000095c <__floatunsisf>:
 95c:	e8 94       	clt
 95e:	09 c0       	rjmp	.+18     	; 0x972 <__floatsisf+0x12>

00000960 <__floatsisf>:
 960:	97 fb       	bst	r25, 7
 962:	3e f4       	brtc	.+14     	; 0x972 <__floatsisf+0x12>
 964:	90 95       	com	r25
 966:	80 95       	com	r24
 968:	70 95       	com	r23
 96a:	61 95       	neg	r22
 96c:	7f 4f       	sbci	r23, 0xFF	; 255
 96e:	8f 4f       	sbci	r24, 0xFF	; 255
 970:	9f 4f       	sbci	r25, 0xFF	; 255
 972:	99 23       	and	r25, r25
 974:	a9 f0       	breq	.+42     	; 0x9a0 <__floatsisf+0x40>
 976:	f9 2f       	mov	r31, r25
 978:	96 e9       	ldi	r25, 0x96	; 150
 97a:	bb 27       	eor	r27, r27
 97c:	93 95       	inc	r25
 97e:	f6 95       	lsr	r31
 980:	87 95       	ror	r24
 982:	77 95       	ror	r23
 984:	67 95       	ror	r22
 986:	b7 95       	ror	r27
 988:	f1 11       	cpse	r31, r1
 98a:	f8 cf       	rjmp	.-16     	; 0x97c <__floatsisf+0x1c>
 98c:	fa f4       	brpl	.+62     	; 0x9cc <__floatsisf+0x6c>
 98e:	bb 0f       	add	r27, r27
 990:	11 f4       	brne	.+4      	; 0x996 <__floatsisf+0x36>
 992:	60 ff       	sbrs	r22, 0
 994:	1b c0       	rjmp	.+54     	; 0x9cc <__floatsisf+0x6c>
 996:	6f 5f       	subi	r22, 0xFF	; 255
 998:	7f 4f       	sbci	r23, 0xFF	; 255
 99a:	8f 4f       	sbci	r24, 0xFF	; 255
 99c:	9f 4f       	sbci	r25, 0xFF	; 255
 99e:	16 c0       	rjmp	.+44     	; 0x9cc <__floatsisf+0x6c>
 9a0:	88 23       	and	r24, r24
 9a2:	11 f0       	breq	.+4      	; 0x9a8 <__floatsisf+0x48>
 9a4:	96 e9       	ldi	r25, 0x96	; 150
 9a6:	11 c0       	rjmp	.+34     	; 0x9ca <__floatsisf+0x6a>
 9a8:	77 23       	and	r23, r23
 9aa:	21 f0       	breq	.+8      	; 0x9b4 <__floatsisf+0x54>
 9ac:	9e e8       	ldi	r25, 0x8E	; 142
 9ae:	87 2f       	mov	r24, r23
 9b0:	76 2f       	mov	r23, r22
 9b2:	05 c0       	rjmp	.+10     	; 0x9be <__floatsisf+0x5e>
 9b4:	66 23       	and	r22, r22
 9b6:	71 f0       	breq	.+28     	; 0x9d4 <__floatsisf+0x74>
 9b8:	96 e8       	ldi	r25, 0x86	; 134
 9ba:	86 2f       	mov	r24, r22
 9bc:	70 e0       	ldi	r23, 0x00	; 0
 9be:	60 e0       	ldi	r22, 0x00	; 0
 9c0:	2a f0       	brmi	.+10     	; 0x9cc <__floatsisf+0x6c>
 9c2:	9a 95       	dec	r25
 9c4:	66 0f       	add	r22, r22
 9c6:	77 1f       	adc	r23, r23
 9c8:	88 1f       	adc	r24, r24
 9ca:	da f7       	brpl	.-10     	; 0x9c2 <__floatsisf+0x62>
 9cc:	88 0f       	add	r24, r24
 9ce:	96 95       	lsr	r25
 9d0:	87 95       	ror	r24
 9d2:	97 f9       	bld	r25, 7
 9d4:	08 95       	ret

000009d6 <__fp_split3>:
 9d6:	57 fd       	sbrc	r21, 7
 9d8:	90 58       	subi	r25, 0x80	; 128
 9da:	44 0f       	add	r20, r20
 9dc:	55 1f       	adc	r21, r21
 9de:	59 f0       	breq	.+22     	; 0x9f6 <__fp_splitA+0x10>
 9e0:	5f 3f       	cpi	r21, 0xFF	; 255
 9e2:	71 f0       	breq	.+28     	; 0xa00 <__fp_splitA+0x1a>
 9e4:	47 95       	ror	r20

000009e6 <__fp_splitA>:
 9e6:	88 0f       	add	r24, r24
 9e8:	97 fb       	bst	r25, 7
 9ea:	99 1f       	adc	r25, r25
 9ec:	61 f0       	breq	.+24     	; 0xa06 <__fp_splitA+0x20>
 9ee:	9f 3f       	cpi	r25, 0xFF	; 255
 9f0:	79 f0       	breq	.+30     	; 0xa10 <__fp_splitA+0x2a>
 9f2:	87 95       	ror	r24
 9f4:	08 95       	ret
 9f6:	12 16       	cp	r1, r18
 9f8:	13 06       	cpc	r1, r19
 9fa:	14 06       	cpc	r1, r20
 9fc:	55 1f       	adc	r21, r21
 9fe:	f2 cf       	rjmp	.-28     	; 0x9e4 <__fp_split3+0xe>
 a00:	46 95       	lsr	r20
 a02:	f1 df       	rcall	.-30     	; 0x9e6 <__fp_splitA>
 a04:	08 c0       	rjmp	.+16     	; 0xa16 <__fp_splitA+0x30>
 a06:	16 16       	cp	r1, r22
 a08:	17 06       	cpc	r1, r23
 a0a:	18 06       	cpc	r1, r24
 a0c:	99 1f       	adc	r25, r25
 a0e:	f1 cf       	rjmp	.-30     	; 0x9f2 <__fp_splitA+0xc>
 a10:	86 95       	lsr	r24
 a12:	71 05       	cpc	r23, r1
 a14:	61 05       	cpc	r22, r1
 a16:	08 94       	sec
 a18:	08 95       	ret

00000a1a <__fp_zero>:
 a1a:	e8 94       	clt

00000a1c <__fp_szero>:
 a1c:	bb 27       	eor	r27, r27
 a1e:	66 27       	eor	r22, r22
 a20:	77 27       	eor	r23, r23
 a22:	cb 01       	movw	r24, r22
 a24:	97 f9       	bld	r25, 7
 a26:	08 95       	ret

00000a28 <__mulsf3>:
 a28:	0b d0       	rcall	.+22     	; 0xa40 <__mulsf3x>
 a2a:	78 c0       	rjmp	.+240    	; 0xb1c <__fp_round>
 a2c:	69 d0       	rcall	.+210    	; 0xb00 <__fp_pscA>
 a2e:	28 f0       	brcs	.+10     	; 0xa3a <__mulsf3+0x12>
 a30:	6e d0       	rcall	.+220    	; 0xb0e <__fp_pscB>
 a32:	18 f0       	brcs	.+6      	; 0xa3a <__mulsf3+0x12>
 a34:	95 23       	and	r25, r21
 a36:	09 f0       	breq	.+2      	; 0xa3a <__mulsf3+0x12>
 a38:	5a c0       	rjmp	.+180    	; 0xaee <__fp_inf>
 a3a:	5f c0       	rjmp	.+190    	; 0xafa <__fp_nan>
 a3c:	11 24       	eor	r1, r1
 a3e:	ee cf       	rjmp	.-36     	; 0xa1c <__fp_szero>

00000a40 <__mulsf3x>:
 a40:	ca df       	rcall	.-108    	; 0x9d6 <__fp_split3>
 a42:	a0 f3       	brcs	.-24     	; 0xa2c <__mulsf3+0x4>

00000a44 <__mulsf3_pse>:
 a44:	95 9f       	mul	r25, r21
 a46:	d1 f3       	breq	.-12     	; 0xa3c <__mulsf3+0x14>
 a48:	95 0f       	add	r25, r21
 a4a:	50 e0       	ldi	r21, 0x00	; 0
 a4c:	55 1f       	adc	r21, r21
 a4e:	62 9f       	mul	r22, r18
 a50:	f0 01       	movw	r30, r0
 a52:	72 9f       	mul	r23, r18
 a54:	bb 27       	eor	r27, r27
 a56:	f0 0d       	add	r31, r0
 a58:	b1 1d       	adc	r27, r1
 a5a:	63 9f       	mul	r22, r19
 a5c:	aa 27       	eor	r26, r26
 a5e:	f0 0d       	add	r31, r0
 a60:	b1 1d       	adc	r27, r1
 a62:	aa 1f       	adc	r26, r26
 a64:	64 9f       	mul	r22, r20
 a66:	66 27       	eor	r22, r22
 a68:	b0 0d       	add	r27, r0
 a6a:	a1 1d       	adc	r26, r1
 a6c:	66 1f       	adc	r22, r22
 a6e:	82 9f       	mul	r24, r18
 a70:	22 27       	eor	r18, r18
 a72:	b0 0d       	add	r27, r0
 a74:	a1 1d       	adc	r26, r1
 a76:	62 1f       	adc	r22, r18
 a78:	73 9f       	mul	r23, r19
 a7a:	b0 0d       	add	r27, r0
 a7c:	a1 1d       	adc	r26, r1
 a7e:	62 1f       	adc	r22, r18
 a80:	83 9f       	mul	r24, r19
 a82:	a0 0d       	add	r26, r0
 a84:	61 1d       	adc	r22, r1
 a86:	22 1f       	adc	r18, r18
 a88:	74 9f       	mul	r23, r20
 a8a:	33 27       	eor	r19, r19
 a8c:	a0 0d       	add	r26, r0
 a8e:	61 1d       	adc	r22, r1
 a90:	23 1f       	adc	r18, r19
 a92:	84 9f       	mul	r24, r20
 a94:	60 0d       	add	r22, r0
 a96:	21 1d       	adc	r18, r1
 a98:	82 2f       	mov	r24, r18
 a9a:	76 2f       	mov	r23, r22
 a9c:	6a 2f       	mov	r22, r26
 a9e:	11 24       	eor	r1, r1
 aa0:	9f 57       	subi	r25, 0x7F	; 127
 aa2:	50 40       	sbci	r21, 0x00	; 0
 aa4:	8a f0       	brmi	.+34     	; 0xac8 <__mulsf3_pse+0x84>
 aa6:	e1 f0       	breq	.+56     	; 0xae0 <__mulsf3_pse+0x9c>
 aa8:	88 23       	and	r24, r24
 aaa:	4a f0       	brmi	.+18     	; 0xabe <__mulsf3_pse+0x7a>
 aac:	ee 0f       	add	r30, r30
 aae:	ff 1f       	adc	r31, r31
 ab0:	bb 1f       	adc	r27, r27
 ab2:	66 1f       	adc	r22, r22
 ab4:	77 1f       	adc	r23, r23
 ab6:	88 1f       	adc	r24, r24
 ab8:	91 50       	subi	r25, 0x01	; 1
 aba:	50 40       	sbci	r21, 0x00	; 0
 abc:	a9 f7       	brne	.-22     	; 0xaa8 <__mulsf3_pse+0x64>
 abe:	9e 3f       	cpi	r25, 0xFE	; 254
 ac0:	51 05       	cpc	r21, r1
 ac2:	70 f0       	brcs	.+28     	; 0xae0 <__mulsf3_pse+0x9c>
 ac4:	14 c0       	rjmp	.+40     	; 0xaee <__fp_inf>
 ac6:	aa cf       	rjmp	.-172    	; 0xa1c <__fp_szero>
 ac8:	5f 3f       	cpi	r21, 0xFF	; 255
 aca:	ec f3       	brlt	.-6      	; 0xac6 <__mulsf3_pse+0x82>
 acc:	98 3e       	cpi	r25, 0xE8	; 232
 ace:	dc f3       	brlt	.-10     	; 0xac6 <__mulsf3_pse+0x82>
 ad0:	86 95       	lsr	r24
 ad2:	77 95       	ror	r23
 ad4:	67 95       	ror	r22
 ad6:	b7 95       	ror	r27
 ad8:	f7 95       	ror	r31
 ada:	e7 95       	ror	r30
 adc:	9f 5f       	subi	r25, 0xFF	; 255
 ade:	c1 f7       	brne	.-16     	; 0xad0 <__mulsf3_pse+0x8c>
 ae0:	fe 2b       	or	r31, r30
 ae2:	88 0f       	add	r24, r24
 ae4:	91 1d       	adc	r25, r1
 ae6:	96 95       	lsr	r25
 ae8:	87 95       	ror	r24
 aea:	97 f9       	bld	r25, 7
 aec:	08 95       	ret

00000aee <__fp_inf>:
 aee:	97 f9       	bld	r25, 7
 af0:	9f 67       	ori	r25, 0x7F	; 127
 af2:	80 e8       	ldi	r24, 0x80	; 128
 af4:	70 e0       	ldi	r23, 0x00	; 0
 af6:	60 e0       	ldi	r22, 0x00	; 0
 af8:	08 95       	ret

00000afa <__fp_nan>:
 afa:	9f ef       	ldi	r25, 0xFF	; 255
 afc:	80 ec       	ldi	r24, 0xC0	; 192
 afe:	08 95       	ret

00000b00 <__fp_pscA>:
 b00:	00 24       	eor	r0, r0
 b02:	0a 94       	dec	r0
 b04:	16 16       	cp	r1, r22
 b06:	17 06       	cpc	r1, r23
 b08:	18 06       	cpc	r1, r24
 b0a:	09 06       	cpc	r0, r25
 b0c:	08 95       	ret

00000b0e <__fp_pscB>:
 b0e:	00 24       	eor	r0, r0
 b10:	0a 94       	dec	r0
 b12:	12 16       	cp	r1, r18
 b14:	13 06       	cpc	r1, r19
 b16:	14 06       	cpc	r1, r20
 b18:	05 06       	cpc	r0, r21
 b1a:	08 95       	ret

00000b1c <__fp_round>:
 b1c:	09 2e       	mov	r0, r25
 b1e:	03 94       	inc	r0
 b20:	00 0c       	add	r0, r0
 b22:	11 f4       	brne	.+4      	; 0xb28 <__fp_round+0xc>
 b24:	88 23       	and	r24, r24
 b26:	52 f0       	brmi	.+20     	; 0xb3c <__fp_round+0x20>
 b28:	bb 0f       	add	r27, r27
 b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fp_round+0x20>
 b2c:	bf 2b       	or	r27, r31
 b2e:	11 f4       	brne	.+4      	; 0xb34 <__fp_round+0x18>
 b30:	60 ff       	sbrs	r22, 0
 b32:	04 c0       	rjmp	.+8      	; 0xb3c <__fp_round+0x20>
 b34:	6f 5f       	subi	r22, 0xFF	; 255
 b36:	7f 4f       	sbci	r23, 0xFF	; 255
 b38:	8f 4f       	sbci	r24, 0xFF	; 255
 b3a:	9f 4f       	sbci	r25, 0xFF	; 255
 b3c:	08 95       	ret

00000b3e <__udivmodhi4>:
 b3e:	aa 1b       	sub	r26, r26
 b40:	bb 1b       	sub	r27, r27
 b42:	51 e1       	ldi	r21, 0x11	; 17
 b44:	07 c0       	rjmp	.+14     	; 0xb54 <__udivmodhi4_ep>

00000b46 <__udivmodhi4_loop>:
 b46:	aa 1f       	adc	r26, r26
 b48:	bb 1f       	adc	r27, r27
 b4a:	a6 17       	cp	r26, r22
 b4c:	b7 07       	cpc	r27, r23
 b4e:	10 f0       	brcs	.+4      	; 0xb54 <__udivmodhi4_ep>
 b50:	a6 1b       	sub	r26, r22
 b52:	b7 0b       	sbc	r27, r23

00000b54 <__udivmodhi4_ep>:
 b54:	88 1f       	adc	r24, r24
 b56:	99 1f       	adc	r25, r25
 b58:	5a 95       	dec	r21
 b5a:	a9 f7       	brne	.-22     	; 0xb46 <__udivmodhi4_loop>
 b5c:	80 95       	com	r24
 b5e:	90 95       	com	r25
 b60:	bc 01       	movw	r22, r24
 b62:	cd 01       	movw	r24, r26
 b64:	08 95       	ret

00000b66 <_exit>:
 b66:	f8 94       	cli

00000b68 <__stop_program>:
 b68:	ff cf       	rjmp	.-2      	; 0xb68 <__stop_program>
